/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
    ALU (x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=aluzr, ng=alung);

    Mul (a=x, b=y, out=mulout);

    Mux16 (a=y, b=x, sel=instruction[4], out=toshift);
    ShiftRight (in=toshift, out=shiftright);
    ShiftLeft (in=toshift, out=shiftleft);
    Mux16 (a=shiftright, b=shiftleft, sel=instruction[5], out=shiftout);

    Mux4Way16 (a=mulout, b=shiftout, c=mulout, d=aluout, sel=instruction[7..8], out[0..7]=result1, out[8..15]=result2, out[15]=msb, out=out);
    Or8Way (in=result1, out=or1);
    Or8Way (in=result2, out=or2);
    Or (a=or1, b=or2, out=notzr);
    Not (in=notzr, out=zr);
    
    And (a=msb, b=true, out=ng);
}