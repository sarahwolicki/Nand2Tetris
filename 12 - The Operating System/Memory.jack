// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static Array freeList;
    static Array lastSegment;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let lastSegment = freeList;
        let freeList[1] = null; //next
        let freeList[0] = 14335; //length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        var int memSize;
        var Array currentSegment;
        var int curSize;
        var Array previousSegment;
        //var int nextSegment;
        //var int delta;
        let memSize = size + 1;
        let currentSegment = freeList;
        let previousSegment = null;
        while (~(currentSegment = null)) {
            //let nextSegment = currentSegment[0];
            let curSize = currentSegment[0];
            if (~(curSize < memSize)) {
                if (curSize = memSize) {
                    // exactly enough space
                    let block = currentSegment;
                    if (~(previousSegment = null)) {
                        let previousSegment[1] = currentSegment[1];
                    }
                }
                else {
                // too much space in segment
                    let currentSegment[0] = (curSize - memSize);
                    let block = currentSegment + currentSegment[0];
                    let block[0] = memSize;
                }
                return block + 1;
            }
            let previousSegment = currentSegment;
            let currentSegment = currentSegment[1];
        }
        return 0; // fail
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        let segment = o - 1;
        let lastSegment[1] = segment;
        let segment[1] = null;
        let lastSegment = segment;
        return;
    }    
}
