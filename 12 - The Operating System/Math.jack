// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powsOfTwo;
    static int Twoqy;

    /** Initializes the library. */
    function void init() {
        var int pow;
        var int i;
        let powsOfTwo = Array.new(16);
        let pow = 1;
        let i = 0;
        while (i < 16) {
            let powsOfTwo[i] = pow;
            let pow = (pow + pow);
            let i = (i + 1);
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int num;
        if (x < 0) {
            let num = x;
            let num = (~num);
            let x = (x + 1);
            return num;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;
        if ((x = 0) | (y = 0)) { //one or both are 0
            return 0;
        }
        else {
            let sum = 0;
            let shiftedX = x;
            let i = 0;
            while (i < 16) {
                if (~((y & powsOfTwo[i]) = 0)) {
                    let sum = (sum + shiftedX);
                }
                let shiftedX = (shiftedX + shiftedX);
                let i = (i + 1);
            }
            return sum;
        }
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int res;
        var boolean negative;
        if (x = 0) {
            return 0;
        }
        if (x < 0) {
            return -Math.divide(-x, y);
        }
        if (y < 0) {
            return -Math.divide(x, -y);
        }
        if ((y > x) | ((y + y) < 0)) {
            let Twoqy = 0;
            return 0;
        }
        let q = Math.divide(x, (y + y));
        if ((x - Twoqy) < y) {
                return (q + q);
        }
        else {
            let Twoqy = (Twoqy + y);
            return (q + q + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int cur;
        var int cur2;
        let y = 0;
        let j = 7;
        while (~(j < 0)) {
            let cur = (y + powsOfTwo[j]);
            let cur2 = Math.multiply(cur, cur);
            if (cur2 > 0) {
                if (~(cur2 > x)) {
                    let y = cur;
                }
            }
            let j = (j - 1);
        }
        return y;
    }

    /** Returns the result of x^y. */
    function int exp(int x, int y) {
        var int res;
        var int i;
        if (y = 0) {
            return 1;
        }
        else {
            let res = x;
            let i = 1;
            while (i < y) {
                let res = (res * x);
                let i = (i + 1);
            }
            return res;
        }
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
