// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screen;
    static boolean color;
    static Array powsOfTwo;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        var int pow;
        var int j;
        let screen = 16384;
        let color = true;
        let powsOfTwo = Array.new(16);
        let pow = 1;
        let i = 0;
        while (i < 16) {
            let powsOfTwo[i] = pow;
            let pow = (pow + pow);
            let i = (i + 1);
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(screen + i, 0);
            let i = (i + 1);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int modulo;
        var int i;
        let address = screen + Screen.multBy32(y) + (x/16);
        let value = Memory.peek(address);
        let modulo = (x & 15);
        if (color) {
            let value = (value | powsOfTwo[modulo]);
        }
        else {
            let value = (value & (~powsOfTwo[modulo]));
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if (x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        else {
            if (y1 = y2) {
                if (x1 < x2) {
                    do Screen.drawHorizontalLine(x1, x2, y1);
                }
                else {
                    do Screen.drawHorizontalLine(x2, x1, y1);
                }
            }
            else {
                if (x2 > x1) {
                    do Screen.drawDiagonalLine(x1, y1, x2, y2);
                }
                else {
                    do Screen.drawDiagonalLine(x2, y2, x1, y1);
                }
            }
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int i;
        var int y;
        var int dy;
        if (y1 < y2) { //going up
            let y = y1;
            let dy = (y2 - y1);
        }
        else {
            let y = y2;
            let dy = (y1 - y2);
        }
        let i = 0;
        while (i < dy) {
            do Screen.drawPixel(x, (y+i));
            let i = (i + 1);
        }
        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int addressStart;
        var int modulo1;
        var int addressEnd;
        var int modulo2;
        var int xEnd;
        var int i;
        var int k;
        var int address;
        var int value;
        var int mask;
        let addressStart = screen + Screen.multBy32(y) + (x1/16);
        let modulo1 = (x1 & 15);
        let addressEnd = screen + Screen.multBy32(y) + (x2/16);
        let modulo2 = (x2 & 15);
        if (addressStart = addressEnd) {
            let i = x1;
            while(~(i > x2)) {
                do Screen.drawPixel(i, y);
                let i = (i + 1);
            }
        }
        else {
            if (~(modulo1 = 0)) {
                let i = x1;
                let xEnd = (x1 + 16 - modulo1);
                while (~(i > xEnd)) {
                    do Screen.drawPixel(i, y);
                    let i = (i + 1);
                }
                let address = (addressStart + 1);
            }
            else {
                let address = addressStart;
            }
            while (address < addressEnd) {
                let value = Memory.peek(address);
                if (color) {
                    let value = (value | -1);
                }
                else {
                    let value = (value & (~(-1)));
                }
                do Memory.poke(address, value);
                let address = address + 1;
            }
            if (~(modulo2 = 0)) {
                let k = (x2 - modulo2);
                while (~(k > x2)) {
                    do Screen.drawPixel(k, y);
                    let k = (k + 1);
                }
            }
        }

        return;
    }


    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int dx;
        var int dy;
        var int a;
        var int b;
        var int adyMinusbdx;
        let dx = (x2 - x1);
        if (y2 > y1) {
            let dy = (y2 - y1);
        }
        else {
            let dy = (y1 - y2);
        }
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        while ((~(a > dx)) | (~(b > dy))) {
            if (y2 > y1) {
                do Screen.drawPixel(x1 + a, y1 + b);
            }
            else {
                do Screen.drawPixel(x1 + a, y1 - b);
            }
            if (adyMinusbdx < 0) {
                let a = (a + 1);
                let adyMinusbdx = (adyMinusbdx + dy);
            }
            else {
                let b = (b + 1);
                let adyMinusbdx = (adyMinusbdx - dx);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (y < y2) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = (y + 1);
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int x1;
        var int x2;
        var int rSquared;
        var int sqrt;
        let rSquared = (r * r);
        let dy = -r;
        while (~(dy > r)) {
            let sqrt = Math.sqrt(rSquared - (dy * dy));
            let x1 = (x - sqrt);
            let x2 = (x + sqrt);
            do Screen.drawHorizontalLine(x1, x2, y+dy);
            let dy = (dy + 1);
        }
        return;
    }


    /** Returns the product of x and y, where x is a power of two
     *  Efficient implementation of multiplication specifically
     *  for when one of the factors is a power of two and multiplication
     *  can be achieved by shifting the bits of the other factor to the left.
     */
     function int multBy32(int y) {
        var int product;
        var int j;
        let product = y;
        let j = 0;
        while (j < 5) {
            let product = (product + product);
            let j = (j + 1);
            }
        return product;
     }
}




