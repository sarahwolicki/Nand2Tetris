// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field bool hasLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let hasLen = false;
        }
        else {
            let hasLen = true;
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (hasLen){
            do str.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = (length + 1);
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = (length - 1);
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var int d;
        var boolean negative;
        let val = 0;
        let i = 0;
        let negative = false;
        if (str[0] = 45) {
            let negative = true;
            let i = 1;
        }
        while (i < length) {
            let d = String.charToInt(str[i]);
            let val = ((val * 10) + d);
            let i = (i + 1);
        }
        if (negative) {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            do intToString(-val);
        }
        else {
            do intToString(val);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 121;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }


    function int charToInt(char c) {
        return (c - 48);
    }

    function char intToChar(int i) {
        return (i + 48);
    }

    method void intToString(int val) {
        var int lastDigit;
        var char c;
        let lastDigit = (val - ((val/10) * 10));
        let c = String.intToChar(lastDigit);
        if (val < 10) {
            do appendChar(c);
        }
        else {
            do intToString(val/10);
            do appendChar(c);
        }
        return;
    }
}
